{"version":3,"sources":["Poem/context.jsx","Poem/api.js","Poem/SchemeSelector/PoemGenerator/examples.js","Poem/SchemeSelector/PoemGenerator/createPoem.js","Poem/SchemeSelector/PoemGenerator/index.jsx","utils/createRhymeScheme.js","Poem/SchemeSelector/index.jsx","Poem/Stanza/index.jsx","Poem/Research/index.jsx","Poem/index.jsx","App.js","serviceWorker.js","index.js"],"names":["PoemContext","createContext","rhymeScheme","letters","stanzas","changeRhymeScheme","PoemContextProvider","props","useState","setRhymeScheme","split","filter","v","i","a","indexOf","Provider","value","scheme","toUpperCase","trim","children","ApiContext","data","getWord","ApiContextProvider","setData","fetchData","code","usage","word","fetch","then","res","json","map","r","catch","err","console","log","addWord","getRelatedWords","getRhymingWords","getSynonyms","getAntonyms","exampleLines","createPoem","availableLines","stanzaLocations","reduce","arr","l","sortedLetters","itm","undefined","o","length","p","sort","b","byCount","sortedRhymes","poem","schemeSet","index","letter","re","RegExp","slice","join","match","howManyBefore","num","stanza","reverse","find","s","line","PoemGenerator","hover","setHover","id","className","stanzaDisplays","acc","thisStanza","pop","lineDisplays","j","key","onMouseOver","onMouseOut","responsiveScheme","ALPHABET","UNCHANGED","createRhymeScheme","input","toBeChanged","replace","includes","getSchemeLetter","SchemeSelector","useContext","typed","setTyped","editMode","setEditMode","validRhymeScheme","handleClick","editDisplay","type","name","onChange","e","target","onKeyPress","onClick","hidden","viewDisplay","window","confirm","Stanza","mode","setMode","lines","data-mode","disabled","rows","Research","setInput","searchWord","setSearchWord","results","sections","title","func","submitNewWord","toLowerCase","wordsToDisplay","Object","keys","w","stopPropagation","href","contents","titleLower","buildSection","Poem","wholePoem","JSON","stringify","App","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8e1a643c.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nconst defaultValues = {\n  rhymeScheme: \"\",\n  letters: [],\n  stanzas: [],\n  changeRhymeScheme: () => { }\n}\nexport const PoemContext = createContext(defaultValues);\n\nexport const PoemContextProvider = (props) => {\n  const [rhymeScheme, setRhymeScheme] = useState(\"\");\n  const letters = rhymeScheme\n    .split(\"\")\n    .filter((v, i, a) => a.indexOf(v) === i && v !== \" \" && v !== \"X\");\n  const stanzas = (rhymeScheme !== \"\") ?\n    rhymeScheme.split(\" \")\n    : [];\n\n  const changeRhymeScheme = (scheme) => {\n    scheme = scheme.toUpperCase().trim();\n    setRhymeScheme(scheme);\n  };\n\n  return (\n    <PoemContext.Provider value={{ rhymeScheme, changeRhymeScheme, letters, stanzas }}>\n      {props.children}\n    </PoemContext.Provider>\n  );\n};\n","import React, { createContext, useState } from \"react\";\n\nconst defaultValues = {\n  data: {},\n  getWord: () => null\n}\nexport const ApiContext = createContext(defaultValues);\n\nexport const ApiContextProvider = (props) => {\n  const [data, setData] = useState({});\n\n  const fetchData = (code, usage, word) => {\n    // console.log(`https://api.datamuse.com/words?${code}=${word}`);\n    setData(\n      {\n        ...data,\n        [word]: {\n          ...data[word],\n          [usage]: 'LOADING'\n        }\n      }\n    )\n    // FIXME Escape characters?\n    fetch(`https://api.datamuse.com/words?${code}=${word}`)\n      .then(res => res.json())\n      .then((res) => {\n        setData(\n          {\n            ...data,\n            [word]: {\n              ...data[word],\n              [usage]: res.map(r => r.word)\n            }\n          }\n        )\n      })\n      .catch((err) => {\n        setData(\n          {\n            ...data,\n            [word]: {\n              ...data[word],\n              [usage]: 'ERROR'\n            }\n          }\n        )\n        console.log(err);\n      });\n  };\n\n  const addWord = (word) => setData({...data, [word]: {}});\n  const getRelatedWords = (word) => fetchData('ml', 'related-words', word);\n  const getRhymingWords = (word) => fetchData('rel_rhy', 'rhyming-words', word);\n  const getSynonyms = (word) => fetchData('rel_syn', 'synonyms', word);\n  const getAntonyms = (word) => fetchData('rel_ant', 'antonyms', word);\n\n  return (\n    <ApiContext.Provider value={{ data, addWord, getRelatedWords, getRhymingWords, getSynonyms, getAntonyms }}>\n      {props.children}\n    </ApiContext.Provider>\n  );\n};\n","export const exampleLines = [\n  [\n    `This is a sample.`,\n    `This is one example.`,\n    `These sentences are ample.`\n  ],\n  [\n    `This ain't a pill.`,\n    `It's quite a thrill.`,\n    `You need this, still.`,\n    `Ask my friend, Jill.`\n  ],\n  [\n    `You chose a scheme.`,\n    `It's not too extreme.`,\n    `I like ice cream.`,\n    `Is there a theme?`,\n    `Airflow, or air stream?`,\n    `Walking on a beam.`,\n    `Thinking of a dream.`,\n    `Interupting midstream`\n  ],\n  [\n    `Choose your selection...`,\n    `Check the cross section!`,\n    `This is perfection!`,\n    `Vote this election!`,\n    `...go without detection!`,\n    `The Clarinet Section.`,\n    `Don't miss your connection!`,\n    `...my misplaced affection.`,\n    `Death by Vivisection.`,\n    `...imperfection.`\n  ],\n  [\n    `Walking through the fog`,\n    `Reciting my monologue`,\n    `I'm the top dog`,\n    `Drink some eggnog`,\n    `See through the smog`,\n    `Sent to the gulag.`,\n    `Obedient, little lap dog`\n  ],\n  [\n    `I said, 'Uhmm? ...yes!'`,\n    `Too much to process...`,\n    `Faux pax to address`,\n    `Done through due process`,\n    `I need to confess`,\n    `I want to progress`,\n    `This was a success`,\n    `My project to obssess`,\n    `See mistakes? Reassess!`\n  ],\n  [\n    `The sky is gray.`,\n    `Read my resume.`,\n    `I need to say...`,\n    `Keep them at bay!`,\n    `Let's go and play!`,\n    `Write an essay.`,\n    `You will soon pay!`,\n    `I need to convey:`,\n    `See you Friday!`,\n    `Gone on holiday`,\n    `Caught in the fray`,\n    `To my dismay`,\n    `My pain, on display!`,\n    `My opinion did sway`,\n    `You have to stay!`,\n    `See you in May!`,\n    `I struggle all day`,\n    `Today's my birthday.`,\n    `No need to betray`,\n    `working at the cafe`,\n    `Eat the whole buffet!`,\n    `Read the Steele Dossier!`\n  ]\n];\n","/*\n  TODO\n    -Create X scheme functionality\n    -Create way for users to add lines to generator\n    EPIC\n      -Create a syllable-count dimension\n*/\n\nconst byCount = (arr) => {\n  let [itm, a, o] = [undefined, [], {}];\n  for (let i = 0; i < arr.length; i++) {\n    itm = arr[i];\n    if (!itm) {\n      continue;\n    }\n    if (o[itm] === undefined) {\n      o[itm] = 1;\n    }\n    else {\n      ++o[itm];\n    }\n  }\n  for (let p in o) {\n    a[a.length] = p;\n  }\n  return a.sort((a, b) => o[b]-o[a]);\n};\n\nconst howManyBefore = (arr,index) => {\n  const letter = arr[index];\n  const re = new RegExp(letter, \"g\");\n  const before = arr.slice(0,index).join(\"\");\n  // console.log(`${letter} appears at index ${index}... what appears before it is ${before}`);\n  return ( before.match(re) || [] ).length;\n};\n\nexport const createPoem = (scheme, availableLines) => {\n  scheme = scheme.trim().toUpperCase().split('');\n  const stanzaLocations = scheme.reduce((arr,l,i) => ((l===\" \") ? [...arr, i] : arr), [-1]);\n  scheme = scheme.filter((l) => (l !== \" \"));\n  // FIXME Will change if new letter suddenly gets more frequency, don't want to change what's already produced\n  const sortedLetters = byCount(scheme);\n  const sortedRhymes = availableLines.sort((a,b) => (b.length - a.length));\n  const poem = scheme.map( (l,i) => {\n    const schemeSet = sortedRhymes[sortedLetters.indexOf(l)];\n    // FIXME Replace line string return with actual error payload\n    if (!schemeSet) {\n      return \"(Sorry... There are not enough rhyme sets for this scheme yet.)\";\n    }\n    return schemeSet[howManyBefore(scheme,i)] || \"(Sorry... There aren't enough lines in this rhyme set yet.)\";\n  });\n  return scheme.map( (l, i) => ({\n    letter: l,\n    num: i + 1,\n    stanza: stanzaLocations.indexOf(stanzaLocations.slice().reverse().find((s) => i >= s)) + 1,\n    line: poem[i]\n  }) );\n};\n","import React, { useState } from \"react\";\nimport {exampleLines} from './examples.js';\nimport {createPoem} from \"./createPoem\";\nimport \"./index.css\";\n\nexport const PoemGenerator = ({scheme}) => {\n\n  const [hover, setHover] = useState();\n\n  if (scheme === \"\") {\n    return (\n      <div id=\"example-poem\" className=\"no-scheme\">\n        (Provide a rhyme scheme to see a poem here.)\n      </div>\n    );\n  }\n\n  scheme = scheme.trim().toUpperCase();\n\n  const poem = createPoem(scheme, exampleLines);\n  // FIXME Move this function into a utility functions file\n  const stanzas = poem.reduce((acc, line, i) => {\n    const newStanza = (i===0 || line.stanza !== poem[i-1].stanza);\n    if (newStanza) { return [...acc, [line]]; }\n    const thisStanza = acc.pop();\n    return [...acc, [...thisStanza, line]];\n  }, []);\n\n  const stanzaDisplays = stanzas.map((s, i) => {\n    // FIXME Add letter-number classNames \n    const lineDisplays = s.map((l,j) => (\n      <div\n        key={`example-line-${j}`}\n        className={`example-line letter-${l.letter}`}\n        onMouseOver={() => setHover(l.letter)}\n        onMouseOut={() => setHover()}\n      >\n        {l.line}\n      </div>\n    ));\n    return (\n      <div key={i} className=\"example-stanza\">\n        <div className=\"title\">Stanza {i + 1}</div>\n        {lineDisplays}\n      </div>\n    );\n  });\n  const responsiveScheme = scheme.split('').map((letter, i) => {\n    if (letter === \" \") { return ' '; }\n    return (\n      <span\n        key={`${i}-${letter}`}\n        className={`scheme-letter letter-${letter}`}\n        onMouseOver={() => setHover(letter)}\n        onMouseOut={() => setHover()}\n      >\n        {letter}\n      </span>\n    );\n  });\n  return (\n    <div id=\"example-poem\" className={(hover) ? `hover-${hover}` : ''}>\n      <b>\"Poem with the {responsiveScheme} rhyme scheme\"</b><br/>\n      {stanzaDisplays}\n    </div>\n  );\n};\n","\n/** An array containing the uppercase alphabet sans X. */\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWYZ\".split('');\n\n/**\n * An array containing characters that might be passed to the input,\n * but should be left alone when the rhyme scheme is created.\n */\nconst UNCHANGED = [\" \", \"X\"];\n\n/**\n * Takes a string and returns a valid rhyme scheme.\n * For example, the invalid \"ABDE D\" would be returned as \"ABCD C\".\n * @param {string} input \n */\nconst createRhymeScheme = (input = \"\") => {\n\tinput = input.toUpperCase().replace(/[^ A-Z]/g, '').split('');\n\tconst toBeChanged = input.filter(\n\t\t(l, i, arr) => !UNCHANGED.includes(l) && arr.indexOf(l) === i\n\t);\n\tconst getSchemeLetter = (l) =>\n\t\t(UNCHANGED.includes(l)) ? l :\n\t\tALPHABET[toBeChanged.indexOf(l)] || \"?\";\n\treturn input.map(getSchemeLetter).join('');\n};\n\nexport default createRhymeScheme;\n","import React, { useContext, useState } from \"react\";\nimport { PoemContext } from \"../context\";\nimport { PoemGenerator } from \"./PoemGenerator\";\nimport createRhymeScheme from '../../utils/createRhymeScheme';\n\nimport \"./index.css\";\n\nconst SchemeSelector = () => {\n  const {rhymeScheme, changeRhymeScheme} = useContext(PoemContext);\n  const [typed, setTyped] = useState(rhymeScheme);\n  const [editMode, setEditMode] = useState(true);\n\n  const validRhymeScheme = createRhymeScheme(typed);\n\n  const handleClick = () => {\n    changeRhymeScheme(validRhymeScheme);\n    setTyped(validRhymeScheme);\n    setEditMode(false);\n  };\n  \n  const enterEditMode = () => {\n    const isSure = window.confirm(\"Are you sure you want to edit the rhyme scheme? You will be undoing all of your work.\");\n    if (isSure) {\n      setEditMode(true);\n    }\n  }\n\n  const editDisplay = (\n    <>\n      <label>\n        Rhyme Scheme:&nbsp;\n        <input\n          id=\"rhyme-scheme\"\n          type=\"text\"\n          name=\"name\"\n          value={typed}\n          onChange={(e) => setTyped(e.target.value.toUpperCase())}\n          onKeyPress={(e) => { if (e.key === \"Enter\") handleClick(); } }\n        />&nbsp;\n        <button onClick={handleClick}>Set</button>\n      </label><br/>\n      <div id=\"scheme-warning\" hidden={(typed === validRhymeScheme)}>\n        ^^^ This rhyme scheme is invalid, it will be converted to <b>\"{validRhymeScheme}\"</b>\n      </div>\n      <br/>\n      <PoemGenerator scheme={validRhymeScheme} />\n    </>\n  );\n  \n  const viewDisplay = (\n    <div>\n      Rhyme Scheme: {validRhymeScheme}&nbsp;\n      <button onClick={() => enterEditMode()}>\n        Reset\n      </button>\n    </div>\n  );\n\n  return (editMode) ? editDisplay : viewDisplay;\n}\n\nexport default SchemeSelector;\n","import React, { useState } from \"react\";\nimport \"./index.css\";\n\nconst Stanza = ({ stanza, i }) => {\n\n  const [mode, setMode] = useState('lines');\n\n  const lines = stanza.split(\"\");\n  return (\n    <div className=\"stanza\" data-mode={mode}>\n      <div className=\"header\">\n        <span className=\"number\">Stanza {i + 1}</span>\n        \n        <div className=\"tabs\">\n          <button\n            className=\"lines\"\n            onClick={() => setMode(\"lines\")}\n            disabled={(mode === \"lines\")}\n          >\n            Lines\n          </button>\n          \n          <button\n            className=\"notes\"\n            onClick={() => setMode(\"notes\")}\n            disabled={(mode === \"notes\")}\n          >\n            Notes\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"display lines\">\n        {\n          lines.map((letter, i) =>\n            <input key={`line-${i}`} type=\"text\" className={`line letter-${letter}`} />)\n        }\n      </div>\n      \n      <div className=\"display notes\">\n        <textarea rows={lines.length * 2} />\n      </div>\n    </div>\n  );\n};\n\nexport default Stanza;\n","import React, { useContext, useState } from \"react\";\nimport { ApiContext } from \"../api\";\nimport \"./index.css\";\n\nconst Research = () => {\n\n  const [input, setInput] = useState('');\n  const [mode, setMode] = useState('Related Words');\n  const [searchWord, setSearchWord] = useState();\n  const {data, addWord, getRelatedWords, getRhymingWords, getSynonyms, getAntonyms} = useContext(ApiContext);\n\n  const results = data[searchWord];\n  // TODO Add support for Definitions\n  const sections = [\n    // { title: 'Definitions', func: getDefinitions },\n    { title: 'Related Words', func: getRelatedWords },\n    { title: 'Rhyming Words', func: getRhymingWords },\n    { title: 'Synonyms', func: getSynonyms },\n    { title: 'Antonyms', func: getAntonyms },\n  ];\n\n  const buildSection = (title, func) => {\n    const titleLower = title.toLowerCase().replace(/ /g, '-');\n    if (!results) { return; }\n\n    let contents;\n    if (results[titleLower] === undefined) {\n      contents = <button onClick={() => func(searchWord)}>Get {title}</button>;\n    }\n    else if (results[titleLower] === 'LOADING') {\n      contents = 'Loading...';\n    }\n    else if (results[titleLower] === 'ERROR') {\n      contents = (\n        <>\n          Sorry, there was an error. Try again?<br/>\n          <button onClick={() => func(searchWord)}>Get {title}</button>\n        </>\n      );\n    }\n    else if (results[titleLower].length === 0) {\n      contents = 'None found.';\n    }\n    else {\n      contents = results[titleLower].map(w => (\n        <button\n          key={w}\n          className='word'\n          onClick={() => addWord(w)}\n          disabled={data[w]}\n          >\n            {w}\n        </button>\n      ) );\n    }\n\n    return (\n      <div\n        key={`data-${titleLower}`}\n        className={`data ${titleLower} ${(mode === title) ? 'active' : 'inactive'}`}>\n        {contents}\n      </div>\n    );\n  };\n\n  const submitNewWord = () => {\n    addWord(input.toLowerCase());\n    setInput('');\n  };\n\n  const wordsToDisplay = Object.keys(data).sort().map(w => (\n    <button\n      key={w}\n      className={`word ${((w === searchWord) ? 'active' : 'inactive')}`}\n      onClick={(e) => {\n        e.stopPropagation(); \n        if (w === searchWord) {\n          setSearchWord('');\n        }\n        else {\n          sections.find(s => mode === s.title).func(w);\n          setSearchWord(w);\n        }\n      }}\n    >\n      {w}\n    </button>\n  ));\n\n  const buildTab = ({title, func}) => (\n    <button\n      key={`tab-${title}`}\n      className=\"tab\"\n      disabled={(mode === title)}\n      onClick={() => { setMode(title); func(searchWord); }}\n    >\n      {title}\n    </button>\n  );\n\n  return (\n    <div id=\"research\">\n\n      { searchWord &&\n        <div className=\"data-display\">\n          <div className=\"tabs\">\n            { sections.map(buildTab) }\n            <div className=\"provided-by\">\n              Data provided by <a href=\"https://www.datamuse.com/\">Datamuse</a>\n            </div>\n          </div>\n          <div className=\"data-area\">\n            { sections.map(({title, func}) => buildSection(title, func)) }\n          </div>\n        </div>\n      }\n      \n      <div className=\"words-display\" onClick={() => setSearchWord()}>\n        {wordsToDisplay}\n      </div>\n\n      <input\n        type=\"text\"\n        name=\"research-word\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        onKeyPress={(e) => { if(e.key === \"Enter\") submitNewWord(); } }\n      />&nbsp;\n      <button\n        onClick={submitNewWord}\n      >\n        Add word\n      </button>\n\n    </div>\n  );\n};\n\nexport default Research;\n","import React, { useContext } from \"react\";\nimport {PoemContext} from \"./context\";\nimport SchemeSelector from \"./SchemeSelector\";\nimport Stanza from \"./Stanza\";\nimport Research from \"./Research\";\nimport \"./index.css\";\n\nconst Poem = () => {\n  const {stanzas} = useContext(PoemContext);\n  const stanzaDisplays = (stanzas.length) ?\n    stanzas.map((stanza, i) =>\n      <Stanza\n        key={`stanza-${i}-${stanza}`}\n        stanza={stanza}\n        i={i}\n      />\n    )\n    : [];\n\n  const wholePoem = (\n    <div>\n      {JSON.stringify(stanzas)}\n    </div>\n  );\n\n  return (\n    <div id=\"poem\">\n      <SchemeSelector />\n      {stanzaDisplays}\n      {wholePoem}\n      <Research />\n    </div>\n  );\n};\n\nexport default Poem;\n","import React from 'react';\nimport {PoemContextProvider} from \"./Poem/context\";\nimport {ApiContextProvider} from \"./Poem/api\";\nimport Poem from './Poem';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <PoemContextProvider>\n      <ApiContextProvider>\n        <div className=\"App\">\n          <Poem />\n        </div>\n      </ApiContextProvider>\n    </PoemContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Poem/context.jsx","Poem/SchemeSelector/utils.js","Poem/FinishedPoem/utils.js","Poem/FinishedPoem/display.jsx","config.js","Poem/SchemeSelector/index.jsx","Poem/MainDisplay/Stanza/index.jsx","Poem/api.js","Poem/MainDisplay/Research/index.jsx","Poem/MainDisplay/index.jsx","Poem/index.jsx","App.js","serviceWorker.js","index.js"],"names":["PoemContext","createContext","rhymeScheme","letters","stanzas","changeRhymeScheme","PoemContextProvider","props","useState","setRhymeScheme","split","filter","v","i","a","indexOf","trim","replace","Provider","value","scheme","toUpperCase","children","ALPHABET","UNCHANGED","createPoem","availableLines","sortedLetters","array","frequency","forEach","sort","b","sortByFrequency","l","lineNumber","map","stanzaLetters","lineLetter","schemeSet","str","index","letter","re","RegExp","slice","match","length","howManyBefore","PoemDisplay","title","author","poem","hasScheme","Boolean","every","stanzaScheme","stanzaNumber","verifyPoemScheme","console","log","id","stanza","key","className","line","dictionaryTypes","introPoem","exampleRhymeSchemes","name","examplePoem","exampleLines","SchemeSelector","useContext","typed","setTyped","validRhymeScheme","input","toBeChanged","arr","includes","getSchemeLetter","join","validateRhymeScheme","invalidCharacter","setInvalidCharacter","providedRhymeScheme","find","exampleRhymeScheme","inputForm","type","onChange","e","target","onKeyPress","test","onClick","href","rel","Stanza","mode","setMode","lines","data-mode","disabled","rows","db","Localbase","addDataToLocal","dictionaryType","word","results","collection","add","fetchDataFromLocal","doc","get","fetchDataFromApi","apiCode","fetch","then","res","json","catch","err","fetchData","localData","SECTION_NAMES","Object","keys","Research","searchWord","setSearchWord","searchResults","setSearchResults","wordCollection","setWordCollection","setInput","addWord","sectionName","data","result","Array","isArray","stopPropagation","toLowerCase","MainDisplay","window","confirm","Poem","App","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.dce7bbf2.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nconst defaultValues = {\n  rhymeScheme: \"\",\n  letters: [],\n  stanzas: [],\n  changeRhymeScheme: () => { }\n}\nexport const PoemContext = createContext(defaultValues);\n\nexport const PoemContextProvider = (props) => {\n  const [rhymeScheme, setRhymeScheme] = useState(\"\");\n  const letters = rhymeScheme\n    .split(\"\")\n    .filter((v, i, a) => a.indexOf(v) === i && v !== \" \" && v !== \"X\");\n  const stanzas = (rhymeScheme !== \"\") ?\n    rhymeScheme.trim().replace(/ +/g, ' ').split(\" \")\n    : [];\n\n  const changeRhymeScheme = (scheme) => {\n    scheme = scheme.toUpperCase().trim();\n    setRhymeScheme(scheme);\n  };\n\n  return (\n    <PoemContext.Provider value={{ rhymeScheme, changeRhymeScheme, letters, stanzas }}>\n      {props.children}\n    </PoemContext.Provider>\n  );\n};\n","\n/** An array containing the uppercase alphabet sans X. */\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWYZ\".split('');\n\n/**\n * An array containing characters that might be passed to the input,\n * but should be left alone when the rhyme scheme is created.\n */\nconst UNCHANGED = [\" \", \"X\"];\n\n/**\n * Takes a string and returns a valid rhyme scheme.\n * For example, the invalid \"ABDE D\" would be returned as \"ABCD C\".\n * @param {string} input \n */\nexport const validateRhymeScheme = (input = \"\") => {\n\tinput = input.trim().toUpperCase()\n\t\t.replace(/ +/g, ' ').replace(/[^ A-Z]/g, '').split('');\n\tconst toBeChanged = input.filter(\n\t\t(l, i, arr) => !UNCHANGED.includes(l) && arr.indexOf(l) === i\n\t);\n\tconst getSchemeLetter = (l) =>\n\t\t(UNCHANGED.includes(l)) ? l :\n\t\tALPHABET[toBeChanged.indexOf(l)] || \"?\";\n\treturn input.map(getSchemeLetter).join('');\n};\n","/*\n  TODO\n    -Create X scheme functionality\n    -Create way for users to add lines to generator\n    EPIC\n      -Create a syllable-count dimension\n*/\n\nfunction sortByFrequency(array) {\n  let frequency = {};\n  array.forEach((value) => { frequency[value] = 0; });\n  let uniques = array.filter((value) => (++frequency[value] === 1));\n  return uniques.sort((a, b) => (frequency[b] - frequency[a]));\n}\n\nconst howManyBefore = (str, index) => {\n  const letter = str[index];\n  const re = new RegExp(letter, \"g\");\n  const before = str.slice(0, index);\n  // console.log(`${letter} appears at index ${index}... what appears before it is ${before}`);\n  return ( before.match(re) || '' ).length;\n};\n\n/**\n * Creates a Nonsense poem out of example lines.\n * @constructor\n * @param {string[]} scheme\n * @param {string[]} availableLines\n*/\nexport const createPoem = (scheme, availableLines) => {\n  scheme = scheme.trim().replace(/ +/g, ' ').toUpperCase();\n\n  // FIXME Will change if new letter suddenly gets more frequency, don't want to change what's already produced\n  const sortedLetters = sortByFrequency( scheme.split('').filter(l => l !== ' ') );\n  let lineNumber = 1;\n  return scheme.split(' ').map((stanzaLetters) =>\n    stanzaLetters.split('').map((lineLetter) => {\n      const schemeSet = availableLines[sortedLetters.indexOf(lineLetter)];\n      // FIXME Replace line string return with actual error payload\n      if (!schemeSet) {\n        return \"(Sorry... There are not enough rhyme sets for this scheme yet.)\";\n      }\n      return schemeSet[howManyBefore(scheme, lineNumber++)] || \"(Sorry... There aren't enough lines in this rhyme set yet.)\";\n    }\n  ));\n};\n\n// TODO Validate that the last words could rhyme too\n/**\n * Takes a poem and a rhyme scheme and makes sure that they could actually be the same. (Has same number of stanzas, and lines in each of the stanzas.)\n * @constructor\n * @param {string[][]} poem\n * @param {string} scheme\n */\nexport const verifyPoemScheme = (poem, scheme) =>\n  scheme.trim().replace(/ +/g, ' ').split(\" \").every((stanzaScheme, stanzaNumber) =>\n    stanzaScheme.length === poem[stanzaNumber].length\n  );\n","import React from \"react\";\nimport { verifyPoemScheme } from \"./utils\";\nimport \"./index.css\";\n\nconst PoemDisplay = ({title=\"Untitled\", author=\"Unknown\", poem, scheme}) => {\n  if (!poem || !poem.length) {\n    return (\n      <div>\n        ERROR! No poem was passed to the PoemDisplay component.\n      </div>\n    )\n  }\n\n  // TODO Create a toggle to allow users to view scheme optionally\n  let hasScheme = Boolean(scheme);\n  if (hasScheme) {\n    const isValid = verifyPoemScheme(poem, scheme);\n    if (!isValid) {\n      console.log(`ERROR: ${scheme} does not work for this poem!`);\n      console.log(\"Cannot open the rhyme scheme viewer.\");\n      hasScheme = false;\n    } else {\n      scheme = scheme.trim().replace(/ +/g, ' ').split(\" \");\n    }\n  }\n\n  return (\n    <div id=\"poem-display\">\n      <div id=\"poem-header\">\n        <span id=\"poem-title\">{title}</span> by <span id=\"poem-author\">{author}</span>\n      </div>\n      {\n        poem.map((stanza, stanzaNumber) =>\n          <div\n            key={`${title}-stanza-${stanzaNumber}`}\n            className=\"poem-stanza\"\n          >\n            {\n              stanza.map((line, lineNumber) =>\n                <div\n                  key={`${title}-stanza-${stanzaNumber}-line-${lineNumber}`}\n                  className=\"line\"\n                >\n                  <span className={`poem line`}>\n                    {line}\n                  </span>\n                  {\n                    hasScheme &&\n                    <span className={`scheme letter letter-${scheme[stanzaNumber][lineNumber]}`}>\n                      {scheme[stanzaNumber][lineNumber]}\n                    </span>\n                  }\n                </div>\n              )\n            }\n          </div>\n        )\n      }\n    </div>\n  )\n};\n\nexport default PoemDisplay;\n","export const dictionaryTypes = {\n  // TODO 'Definition': '???',\n  'Related Words': 'ml',\n  'Rhyming Words': 'rel_rhy',\n  'Synonyms': 'rel_syn',\n  'Antonyms': 'rel_ant'\n};\n\nexport const introPoem = {\n  title: \"The Poem Generator\",\n  author: \"Jared Weide\",\n  poem: [\n    [\n      \"Welcome to my creation!\",\n      \"I hope it helps your aspiration.\",\n      \"To help you rhyme\",\n      \"and write poetry so sublime\",\n      \"...or at least provide some good foundation\"\n    ]\n  ],\n  scheme: \"AABBA\"\n};\n\nexport const exampleRhymeSchemes = [\n  {\n    name: \"Alternating Rhyme\",\n    examplePoem: {\n      title: \"Neither Out Far Nor In Deep\",\n      author: \"Robert Frost\",\n      poem: [\n        [\n          \"The people along the sand\",\n          \"All turn and look one way.\",\n          \"They turn their back on the land.\",\n          \"They look at the sea all day.\"\n        ],\n        [\n          \"As long as it takes to pass\",\n          \"A ship keeps raising its hull;\",\n          \"The wetter ground like glass\",\n          \"Reflects a standing gull\"\n        ],\n        [\n          \"The land may vary more;\",\n          \"But wherever the truth may be—\",\n          \"The water comes ashore,\",\n          \"And the people look at the sea.\"\n        ],\n        [\n          \"They cannot look out far.\",\n          \"They cannot look in deep.\",\n          \"But when was that ever a bar\",\n          \"To any watch they keep?\"\n        ]\n      ],\n      scheme: \"ABAB CDCD EFEF GHGH\"\n    }\n  },\n  {\n    name: \"Ballade\",\n    examplePoem: {\n      title: \"Ballade of Modest Confession\",\n      author: \"Hilaire Belloc\",\n      poem: [\n        [\n          \"My reading is extremely deep and wide;\",  \n          \"And as our modern education goes—\",\n          \"Unique I think, and skilfully applied\",\n          \"To Art and Industry and Autres Choses\",\n          \"Through many years of scholarly repose.\",\n          \"But there is one thing where I disappoint\",\n          \"My numerous admirers (and my foes).\",\n          \"Painting on Vellum is my weakest point.\"\n        ],\n        [\n          \"I ride superbly. When I say I 'ride'\",\n          \"The word's too feeble. I am one of those\",\n          \"That dominate a horse. It is my pride\",\n          \"To tame the fiercest with tremendous blows\",\n          \"Of heel and knee. The while my handling shows\",\n          \"Such lightness as a lady's. But Aroint\",\n          \"Thee! Human frailty with thy secret woes!\",\n          \"Painting on Vellum is my weakest point.\"\n        ],\n        [\n          \"Painting on Vellum: not on silk or hide\",\n          \"Or ordinary Canvas: I suppose\",\n          \"No painter of the present day has tried\",\n          \"So many mediums with success, or knows\",\n          \"As well as I do how the subject grows\",\n          \"Beneath the hands of genius, that anoint\",\n          \"With balm. But I have something to disclose—\",\n          \"Painting on Vellum is my weakest point.\"\n        ],\n        // TODO This is called an \"Envoi\". Do you want to add the ability to name stanzas?\n        [\n          \"Prince! do not let your Nose, your royal Nose,\",\n          \"Your large imperial Nose get out of Joint.\",\n          \"For though you cannot touch my golden Prose,\",\n          \"Painting on Vellum is my weakest point.\"\n        ]\n      ],\n      // TODO Add a way to display shortened rhyme schemes? See more?\n      scheme: \"ABABBCBC ABABBCBC ABABBCBC BCBC\"\n    }\n  },\n  {\n    name: \"Coupled Rhyme\",\n    examplePoem: {\n      title: \"Excerpt from Green Eggs and Ham\",\n      author: \"Dr. Seuss\",\n      poem: [\n        [\n          \"I would not like them here or there.\",\n          \"I would not like them anywhere.\",\n          \"I do not like green eggs and ham.\",\n          \"I do not like them, Sam-I-Am.\"\n        ]\n      ],\n      scheme: \"AABB\"\n    }\n  },\n  {\n    name: \"Triplet Rhyme\",\n    examplePoem: {\n      title: \"Upon Julia's Clothes\",\n      author: \"Robert Herrick\",\n      poem: [\n        [\n          \"Whenas in silks my Julia goes,\",\n          \"Then, then (methinks) how sweetly flows\",\n          \"That liquefaction of her clothes.\"\n        ],\n        [ \n          \"Next, when I cast mine eyes, and see\",\n          \"That brave vibration each way free,\",\n          \"O how that glittering taketh me!\"\n        ]\n      ],\n      scheme: \"AAA BBB\"\n    }\n  },\n  {\n    name: \"Monorhyme\",\n    examplePoem: {\n      title: \"Night Storm\",\n      author: \"Marie Summers\",\n      poem: [\n        [\n          \"It came in a winter’s night,\",\n          \"a fierce cold with quite a bite.\",\n          \"Frosted wind with all its might\",\n          \"sent ice and snow an invite\",\n          \"to layer earth in pure white\",\n          \"and glisten with morning light.\"\n        ]\n      ],\n      scheme: \"AAAAAA\"\n    }\n  },\n  {\n    name: \"Limerick\",\n    examplePoem: {\n      title: \"A Young Lady of Lynn\",\n      poem: [\n        [\n          \"There was a young lady of Lynn,\",\n          \"Who was so uncommonly thin\",\n          \"That when she essayed\",\n          \"To drink lemonade\",\n          \"She slipped through the straw and fell in.\"\n        ]\n      ],\n      scheme: \"AABBA\"\n    }\n  },\n  {\n    name: \"Villanelle\",\n    examplePoem: {\n      title: \"Do Not Go Gentle Into That Good Night\",\n      author: \"Dylan Thomas\",\n      poem: [\n        [\n          // TODO Create a way to add refrains?\n          \"Do not go gentle into that good night,\",\n          \"Old age should burn and rave at close of day;\",\n          \"Rage, rage against the dying of the light.\"\n        ],\n        [\n          \"Though wise men at their end know dark is right,\",\n          \"Because their words had forked no lightning they\",\n          \"Do not go gentle into that good night.\"\n        ],\n        [\n          \"Good men, the last wave by, crying how bright\",\n          \"Their frail deeds might have danced in a green bay\",\n          \"Rage, rage against the dying of the light.\"\n        ],\n        [ \n          \"And you, my father, there on the sad height,\",\n          \"Curse, bless, me now with your fierce tears, I pray.\",\n          \"Do not go gentle into that good night.\",\n          \"Rage, rage against the dying of the light.\"\n        ]\n      ],\n      scheme: \"ABA ABA ABA ABA ABA ABAA\"\n    }\n  },\n  {\n    name: \"Enclosed Rhyme\",\n    examplePoem: {\n      // TODO Create a way to denote excerpts, first stanzas, etc...\n      title: \"First Stanza of Shakespeare\",\n      author: \"Matthew Arnold\",\n      poem: [\n        [\n          \"Others abide our question. Thou art free.\",\n          \"We ask and ask—Thou smilest and art still,\",\n          \"Out-topping knowledge. For the loftiest hill,\",\n          \"Who to the stars uncrowns his majesty, ...\"\n        ]\n      ],\n      scheme: \"ABBA\"\n    }\n  },\n];\n\nexport const exampleLines = [\n  [\n    `This is a sample.`,\n    `This is one example.`,\n    `These sentences are ample.`\n  ],\n  [\n    `This ain't a pill.`,\n    `It's quite a thrill.`,\n    `You need this, still.`,\n    `Ask my friend, Jill.`\n  ],\n  [\n    `You chose a scheme.`,\n    `It's not too extreme.`,\n    `I like ice cream.`,\n    `Is there a theme?`,\n    `Airflow, or air stream?`,\n    `Walking on a beam.`,\n    `Thinking of a dream.`,\n    `Interrupting midstream`\n  ],\n  [\n    `Choose your selection...`,\n    `Check the cross section!`,\n    `This is perfection!`,\n    `Vote this election!`,\n    `...go without detection!`,\n    `The Clarinet Section.`,\n    `Don't miss your connection!`,\n    `...my misplaced affection.`,\n    `Death by Vivisection.`,\n    `...imperfection.`\n  ],\n  [\n    `Walking through the fog`,\n    `Reciting my monologue`,\n    `I'm the top dog`,\n    `Drink some eggnog`,\n    `See through the smog`,\n    `Sent to the gulag.`,\n    `Obedient, little lap dog`\n  ],\n  [\n    `I said, 'Uhmm? ...yes!'`,\n    `Too much to process...`,\n    `Faux pax to address`,\n    `Done through due process`,\n    `I need to confess`,\n    `I want to progress`,\n    `This was a success`,\n    `My project to obsess`,\n    `See mistakes? Reassess!`\n  ],\n  [\n    `The sky is gray.`,\n    `Read my resume.`,\n    `I need to say...`,\n    `Keep them at bay!`,\n    `Let's go and play!`,\n    `Write an essay.`,\n    `You will soon pay!`,\n    `I need to convey:`,\n    `See you Friday!`,\n    `Gone on holiday`,\n    `Caught in the fray`,\n    `To my dismay`,\n    `My pain, on display!`,\n    `My opinion did sway`,\n    `You have to stay!`,\n    `See you in May!`,\n    `I struggle all day`,\n    `Today's my birthday.`,\n    `No need to betray`,\n    `working at the cafe`,\n    `Eat the whole buffet!`,\n    `Read the Steele Dossier!`\n  ]\n].sort((a,b) => (b.length - a.length));\n","import React, { useContext, useState } from \"react\";\nimport { PoemContext } from \"../context\";\nimport { validateRhymeScheme } from './utils';\nimport PoemDisplay from \"../FinishedPoem/display\";\nimport {\n  introPoem,\n  exampleRhymeSchemes,\n  exampleLines\n} from \"../../config\";\nimport \"./index.css\";\nimport { createPoem } from \"../FinishedPoem/utils\";\n\nconst SchemeSelector = () => {\n  const {changeRhymeScheme} = useContext(PoemContext);\n  const [typed, setTyped] = useState('');\n  const validRhymeScheme = validateRhymeScheme(typed);\n  // FIXME Add warning for pasting too?\n  const [invalidCharacter, setInvalidCharacter] = useState();\n\n  const providedRhymeScheme = exampleRhymeSchemes.find(exampleRhymeScheme =>\n    exampleRhymeScheme.examplePoem.scheme === validRhymeScheme\n  );\n  const examplePoem = (typed === '')\n    ? <PoemDisplay {...introPoem} />\n    : (providedRhymeScheme)\n      ? <PoemDisplay {...providedRhymeScheme.examplePoem} />\n      : <PoemDisplay\n          title=\"Nonsense\"\n          author=\"The Poem Generator\"\n          poem={createPoem(validRhymeScheme, exampleLines)}\n          scheme={validRhymeScheme}\n        />\n\n  const inputForm = (\n    <div id=\"input-form\">\n      <div>\n        <div>\n          Please provide a rhyme scheme for the poem you would like to create!\n        </div>\n        <input\n          id=\"rhyme-scheme\"\n          type=\"text\"\n          name=\"name\"\n          value={typed}\n          onChange={(e) =>\n            setTyped(e.target.value.toUpperCase()\n              .replace(/(^ +)|[^ A-Z]/g, '').replace(/ +/g, ' '))\n          }\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") {\n              changeRhymeScheme(validRhymeScheme);\n            }\n            else if (/[^ A-Z]/i.test(e.key)) {\n              setInvalidCharacter(e.key);\n            }\n            else if (invalidCharacter) {\n              setInvalidCharacter();\n            }\n          } }\n        />&nbsp;\n        <button onClick={() => changeRhymeScheme(validRhymeScheme)}>Set</button>\n        {\n          typed.trim().replace(/ +/g, ' ') !== validRhymeScheme &&\n          <div id=\"scheme-warning\" className=\"warning\" >\n            This rhyme scheme is invalid, it will be converted to&nbsp;\n            <span\n              id=\"valid-rhyme-scheme\"\n              onClick={() => setTyped(validRhymeScheme)}\n              title={`Click to replace with ${validRhymeScheme}`}\n            >\n              \"<b>{validRhymeScheme}</b>\". (Click here to replace now.)\n            </span>\n          </div>\n        }\n        {\n          invalidCharacter &&\n          <div id=\"typed-warning\" className=\"warning\">\n            {invalidCharacter} is not a valid character in rhyme schemes\n          </div>\n        }\n      </div>\n      <br />\n      <div>\n        Here are some popular rhyme schemes. Click one to populate an example poem.\n      </div>\n      {/* TODO Create a modal for viewing with additional information */}\n      <div id=\"rhyme-scheme-examples\">\n        {\n          exampleRhymeSchemes.map(({name, examplePoem: {scheme}}) => (\n            <div\n              key={name}\n              className={`example-scheme ${(scheme === validRhymeScheme) ? \"active\" : \"\"}`}\n              onClick={() => setTyped(scheme)}\n            >\n              <b>{name}</b><br />\n              {scheme}\n            </div>\n          ))\n        }\n        <div className=\"thanks\">\n          Special thanks to Jennifer Betts at&nbsp;\n          <a\n            href=\"https://examples.yourdictionary.com/common-rhyme-scheme-examples-in-poetry.html\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            YourDictionary\n          </a>\n          &nbsp;for providing examples.\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      {examplePoem}\n      {inputForm}\n    </>\n  );\n\n}\n\nexport default SchemeSelector;\n","import React, { useState } from \"react\";\nimport \"./index.css\";\n\nconst Stanza = ({ stanza, i }) => {\n\n  const [mode, setMode] = useState('lines');\n\n  const lines = stanza.split(\"\");\n  return (\n    <div className=\"stanza\" data-mode={mode}>\n      <div className=\"header\">\n        <span className=\"number\">Stanza {i + 1}</span>\n        \n        <div className=\"tabs\">\n          <button\n            className=\"lines\"\n            onClick={() => setMode(\"lines\")}\n            disabled={(mode === \"lines\")}\n          >\n            Lines\n          </button>\n          \n          <button\n            className=\"notes\"\n            onClick={() => setMode(\"notes\")}\n            disabled={(mode === \"notes\")}\n          >\n            Notes\n          </button>\n        </div>\n      </div>\n      \n      {/* TODO Push lines to context */}\n      <div className=\"display lines\">\n        {\n          lines.map((letter, i) =>\n            <input key={`line-${i}`} type=\"text\" className={`line letter-${letter}`} />)\n        }\n      </div>\n      \n      <div className=\"display notes\">\n        <textarea rows={lines.length * 2} />\n      </div>\n    </div>\n  );\n};\n\nexport default Stanza;\n","import Localbase from \"localbase\";\nimport { dictionaryTypes } from \"../config\";\n\nconst db = new Localbase('dictionaries');\n\nconst addDataToLocal = async (dictionaryType, word, results) =>\n  await db.collection(dictionaryType).add({ word, results });\n\nconst fetchDataFromLocal = async (dictionaryType, word) =>\n  await db.collection(dictionaryType).doc({ word }).get();\n\nconst fetchDataFromApi = async (dictionaryType, word) => {\n  const apiCode = dictionaryTypes[dictionaryType];\n  if (!apiCode) {\n    return `ERROR: \"${dictionaryType}\" is not a recognized dictionary type.`;\n  }\n  return await fetch(`https://api.datamuse.com/words?${apiCode}=${word}`)\n    .then(res => res.json())\n    .then(res => res)\n    .catch(err => `ERROR from the DataMuse API: ${err}`);\n};\n\nexport const fetchData = async (dictionaryType, word) => {\n  const localData = await fetchDataFromLocal(dictionaryType, word);\n  if (localData) {\n    return localData.results;\n  }\n  else {\n    return await fetchDataFromApi(dictionaryType, word)\n      .then(res => {\n        addDataToLocal(dictionaryType, word, res);\n        return res;\n      })\n  }\n};\n","import React, { useState } from \"react\";\nimport { fetchData } from \"../../api\";\nimport { dictionaryTypes } from \"../../../config\";\nimport \"./index.css\";\n\nconst SECTION_NAMES = Object.keys(dictionaryTypes);\n\nconst Research = () => {\n  const [mode, setMode] = useState('Rhyming Words');\n  const [searchWord, setSearchWord] = useState();\n  const [searchResults, setSearchResults] = useState();\n  const [wordCollection, setWordCollection] = useState([]);\n  const [input, setInput] = useState('');\n\n  const addWord = (word) => {\n    if (!wordCollection.includes(word)) {\n      setWordCollection([...wordCollection, word].sort())\n    }\n  }\n\n  return (\n    <div id=\"research\">\n\n      {\n        searchWord &&\n          <div className=\"data-display\">\n            <div className=\"tabs\">\n              {\n                SECTION_NAMES.map(sectionName => (\n                  <button\n                    key={`tab-${sectionName}`}\n                    className=\"tab\"\n                    disabled={(mode === sectionName)}\n                    onClick={async () => {\n                      setMode(sectionName);\n                      setSearchResults(\"LOADING...\");\n                      const data = await fetchData(sectionName, searchWord);\n                      setSearchResults(data.map(result => result.word));\n                    }}\n                  >\n                    {sectionName}\n                  </button>\n                ))\n              }\n              <div className=\"provided-by\">\n                Data provided by <a href=\"https://www.datamuse.com/\">Datamuse</a>\n              </div>\n            </div>\n\n            <div className='data'>\n              {\n                Array.isArray(searchResults)\n                  ? searchResults.length\n                      ? searchResults.map(word => (\n                        <button\n                          key={`word-${word}`}\n                          className='word'\n                          onClick={() =>\n                            addWord(word)\n                          }\n                          disabled={wordCollection.includes(word)}\n                        >\n                          {word}\n                        </button>\n                      ))\n                      : <>None found.</>\n                  : /^ERROR/.test(searchResults)\n                    ? <>\n                        <span id=\"api-error\">\n                          Sorry, there was an error. Try again?\n                        </span>\n                        <button onClick={() =>\n                          fetchData(mode, searchWord)\n                        }>\n                          Get {mode}\n                        </button>\n                      </>\n                    : <>{searchResults}</>\n              }\n            </div>\n        </div>\n      }\n      \n      <div\n        className=\"words-display\"\n        onClick={() =>\n          setSearchWord()\n        }\n      >\n        {\n          wordCollection.map(word => (\n            <button\n              key={`word-collection-${word}`}\n              className={`word ${((word === searchWord) ? 'active' : 'inactive')}`}\n              onClick={async (e) => {\n                e.stopPropagation(); \n                if (word === searchWord) {\n                  setSearchWord();\n                }\n                else {\n                  setSearchWord(word);\n                  setSearchResults(\"LOADING...\");\n                  const data = await fetchData(mode, word);\n                  setSearchResults(data.map(result => result.word));\n                }\n              }}\n            >\n              {word}\n            </button>\n          ))\n        }\n      </div>\n\n      <input\n        type=\"text\"\n        name=\"research-word\"\n        value={input}\n        onChange={(e) =>\n          setInput(e.target.value.toLowerCase())\n        }\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") {\n            addWord(input);\n            setInput('');\n          }\n        } }\n      />&nbsp;\n      <button\n        onClick={() => {\n          addWord(input);\n          setInput('');\n        }}\n      >\n        Add word\n      </button>\n\n    </div>\n  );\n};\n\nexport default Research;\n","import React, { useContext } from \"react\";\nimport {PoemContext} from \"../context\";\nimport Stanza from \"./Stanza\";\nimport Research from \"./Research\";\n// import \"./index.css\";\n\nconst MainDisplay = () => {\n  const {stanzas, rhymeScheme, changeRhymeScheme} = useContext(PoemContext);\n\n  const enterEditMode = () => {\n    const isSure = window.confirm(\"Are you sure you want to edit the rhyme scheme? You will be undoing all of your work.\");\n    if (isSure) {\n      changeRhymeScheme('');\n    }\n  }\n\n  return (\n    <>\n      <div id=\"rhyme-scheme-display\">\n        Rhyme Scheme: {rhymeScheme}&nbsp;\n        <button onClick={() => enterEditMode()}>\n          Reset\n        </button>\n      </div>\n\n      {\n        stanzas.length &&\n        stanzas.map((stanza, i) =>\n          <Stanza\n            key={`stanza-${i}-${stanza}`}\n            stanza={stanza}\n            i={i}\n          />\n        )\n      }\n\n      <Research />\n    </>\n  );\n};\n\nexport default MainDisplay;\n","import React, { useContext } from \"react\";\nimport {PoemContext} from \"./context\";\nimport SchemeSelector from \"./SchemeSelector\";\nimport MainDisplay from \"./MainDisplay\";\n// import FinishedPoem from \"./FinishedPoem\";\nimport \"./index.css\";\n\nconst Poem = () => {\n  const {rhymeScheme} = useContext(PoemContext);\n\n  return (\n    <div id=\"poem\">\n      { !rhymeScheme && <SchemeSelector /> }\n      { rhymeScheme && <MainDisplay /> }\n      {/* && <FinishedPoem /> */}\n    </div>\n  );\n};\n\nexport default Poem;\n","import React from 'react';\nimport {PoemContextProvider} from \"./Poem/context\";\nimport Poem from './Poem';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <PoemContextProvider>\n      <div className=\"App\">\n        <Poem />\n      </div>\n    </PoemContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}